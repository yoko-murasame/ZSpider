{"ruleConfig":"const puppeteer = require('puppeteer-core')\r\n// const { dialog } = require('electron')\r\nconst XLSX = require('xlsx')\r\nconst fs = require('fs')\r\nconst moment = require('moment')\r\nconst path = require('path')\r\n\r\nlet 水库名称 = '珊溪水库'\r\nlet 水库代码 = '70600500'\r\nlet 天数 = 1\r\nlet url = `https://sqfb.zjsq.net.cn:8089/nuxtsyq/new/MarkInfo?zh=${水库代码}&zm=${encodeURIComponent(水库名称)}&day=${天数}`\r\n// let url ='https://sqfb.zjsq.net.cn:8089/nuxtsyq/new/MarkInfo?zh=70508440&zm=%E6%B3%BD%E9%9B%85%E6%B0%B4%E5%BA%93&day=1'\r\nlet chromePath = 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\r\n\r\nlet browser, page\r\nasync function spider() {\r\n  browser = await puppeteer.launch({\r\n    headless: true,\r\n    executablePath: chromePath,\r\n    args: [\r\n      // 禁用一些功能\r\n      '--no-sandbox', // 沙盒模式\r\n      '--disable-setuid-sandbox', // uid沙盒\r\n      '--disable-dev-shm-usage', // 创建临时文件共享内存\r\n      '--disable-accelerated-2d-canvas', // canvas渲染\r\n      '--disable-gpu', // GPU硬件加速\r\n    ],\r\n    ignoreDefaultArgs: ['--enable-automation'],\r\n  })\r\n\r\n  page = await browser.newPage()\r\n\r\n  // console.log('page', page)\r\n\r\n  await page.goto(url)\r\n\r\n  console.log('goto')\r\n\r\n  // 自定义函数无法传递，需要转换成字符串，然后绑定到页面上下文\r\n  const formateDate = (strDate) => {\r\n    console.log('strDate', strDate)\r\n    return !strDate || moment(strDate, 'MM-DD HH:mm').format('YYYY-MM-DD HH:mm')\r\n  }\r\n\r\n  // 注入时间库\r\n  const librarySource = fs.readFileSync(\r\n    path.resolve('node_modules/moment/min/moment.min.js'),\r\n    'utf8'\r\n  )\r\n  await page.evaluate(librarySource)\r\n\r\n  // 现在你可以在 page.$eval 或 page.$$eval 中使用 moment 库了\r\n  const result = await page.evaluate(() => {\r\n    return moment().format('YYYY-MM-DD-HH-mm')\r\n  })\r\n  console.log('当前日期和时间', result)\r\n\r\n  // const tbody = await page.$eval('tbody', (a) => a.innerHTML)\r\n  // console.log('tbody', tbody)\r\n\r\n  // 在Puppeteer的$eval和$$eval方法中，你不能直接访问外部作用域的函数或变量，因为这些方法在页面的上下文中执行JavaScript，这是一个与Node.js代码隔离的环境\r\n  const data = await page.$$eval(\r\n    'tbody>.el-table__row',\r\n    (rows, funcStr) => {\r\n      const func = new Function(`return ${funcStr}`)()\r\n      return rows.map((row) => {\r\n        const columns = Array.from(row.querySelectorAll('.el-table__cell'))\r\n        const dataObj = {}\r\n        for (let i = 0; i < columns.length; i++) {\r\n          const td = columns[i]\r\n          switch (i) {\r\n            case 0:\r\n              dataObj['序号'] = td.querySelector('div>div').innerText\r\n              break\r\n            case 1:\r\n              dataObj['时间'] = func(td.querySelector('div').innerText)\r\n              break\r\n            case 2:\r\n              dataObj['雨量'] = td.querySelector('div').innerText\r\n              break\r\n            case 3:\r\n              dataObj['水位'] = td.querySelector('div>span').innerText\r\n              break\r\n            case 4:\r\n              dataObj['库容'] = td.querySelector('div>span').innerText\r\n              break\r\n            case 5:\r\n              dataObj['人工出库流量'] = td.querySelector('div>span').innerText\r\n              break\r\n            case 6:\r\n              dataObj['人工入库流量'] = td.querySelector('div>span').innerText\r\n              break\r\n            default:\r\n              break\r\n          }\r\n        }\r\n        return dataObj\r\n      })\r\n    },\r\n    formateDate.toString() // 绑定自定义函数\r\n  )\r\n\r\n  console.log('包括冗余行数量', data.length)\r\n  // console.log('data', data)\r\n\r\n  // 合并数据\r\n  const half = data.length / 2\r\n  const firstHalf = data.slice(0, half)\r\n  const secondHalf = data.slice(half)\r\n\r\n  const filterEmptyKeys = (obj) => {\r\n    const filteredObj = {}\r\n    for (const key in obj) {\r\n      if (obj[key] !== null && obj[key] !== '') {\r\n        filteredObj[key] = obj[key]\r\n      }\r\n    }\r\n    return filteredObj\r\n  }\r\n\r\n  const mergedData = firstHalf.map((item, index) => {\r\n    const filteredFirst = filterEmptyKeys(item)\r\n    const filteredSecond = filterEmptyKeys(secondHalf[index])\r\n    return { ...filteredFirst, ...filteredSecond }\r\n  })\r\n\r\n  console.log('合并后的数据', mergedData)\r\n\r\n  await browser.close()\r\n\r\n  // 导出数据\r\n  const ws = XLSX.utils.json_to_sheet(mergedData)\r\n  const wb = XLSX.utils.book_new()\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n  XLSX.writeFile(wb, `${水库名称}-${水库代码}-${result}.xlsx`)\r\n\r\n  // dialog\r\n  //   .showSaveDialog({\r\n  //     filters: [{ name: 'Excel', extensions: ['xlsx'] }],\r\n  //   })\r\n  //   .then((result) => {\r\n  //     if (!result.canceled) {\r\n  //       XLSX.writeFile(wb, result.filePath)\r\n  //     }\r\n  //   })\r\n  //   .catch((err) => {\r\n  //     console.log(err)\r\n  //   })\r\n}\r\n\r\nspider()\r\n","type":"code"}