{"ruleConfig":"/*eslint-disable*/\r\nconst puppeteer = require('puppeteer-core')\r\nconst XLSX = require('xlsx')\r\nconst moment = require('moment')\r\n// const fs = require('fs')\r\n// const cheerio = require('cheerio')\r\nconst path = require('path')\r\nconst os = require('os')\r\n\r\nlet 水库名称 = '珊溪水库'\r\nlet 水库代码 = '70600500'\r\nlet 天数 = 7\r\nlet url = `https://sqfb.zjsq.net.cn:8089/nuxtsyq/new/MarkInfo?zh=${水库代码}&zm=${encodeURIComponent(\r\n  水库名称\r\n)}&day=${天数}`\r\n// let url ='https://sqfb.zjsq.net.cn:8089/nuxtsyq/new/MarkInfo?zh=70508440&zm=%E6%B3%BD%E9%9B%85%E6%B0%B4%E5%BA%93&day=1'\r\nlet chromePath = 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\r\n\r\nlet browser, page\r\nasync function spider() {\r\n  browser = await puppeteer.launch({\r\n    headless: true,\r\n    executablePath: chromePath,\r\n    args: [\r\n      // 禁用一些功能\r\n      '--no-sandbox', // 沙盒模式\r\n      '--disable-setuid-sandbox', // uid沙盒\r\n      '--disable-dev-shm-usage', // 创建临时文件共享内存\r\n      '--disable-accelerated-2d-canvas', // canvas渲染\r\n      '--disable-gpu', // GPU硬件加速\r\n    ],\r\n    ignoreDefaultArgs: ['--enable-automation'],\r\n  })\r\n\r\n  page = await browser.newPage()\r\n\r\n  await page.goto(url)\r\n\r\n  console.log('页面加载完成')\r\n\r\n  // 使用 moment 库\r\n  const result = moment().format('DD/MM/YYYY HH:mm:ss')\r\n  console.log(result)\r\n  console.log('当前日期和时间')\r\n\r\n  // 分析dom table\r\n  let data = await page.$$eval('tbody>.el-table__row', (rows) => {\r\n    return rows.map((row) => {\r\n      const columns = Array.from(row.querySelectorAll('.el-table__cell'))\r\n      const dataObj = {}\r\n      for (let i = 0; i < columns.length; i++) {\r\n        const td = columns[i]\r\n        // 填充数据\r\n        switch (i) {\r\n          case 0:\r\n            // dataObj['序号'] = td.querySelector('div>div').innerText\r\n            // dataObj['序号'] = dataObj['序号'].trim() === '-' ? null : dataObj['序号']\r\n            break\r\n          case 1:\r\n            // 时间\r\n            dataObj['record_time'] = td.querySelector('div').innerText\r\n            break\r\n          case 2:\r\n            // 雨量\r\n            dataObj['rainfall'] = td.querySelector('div').innerText\r\n            dataObj['rainfall'] = dataObj['rainfall'].trim() === '-' ? null : dataObj['rainfall']\r\n            break\r\n          case 3:\r\n            // 水位\r\n            dataObj['waterlevel'] = td.querySelector('div>span').innerText\r\n            dataObj['waterlevel'] = dataObj['waterlevel'].trim() === '-' ? null : dataObj['waterlevel']\r\n            break\r\n          case 4:\r\n            // 库容\r\n            dataObj['capacity'] = td.querySelector('div>span').innerText\r\n            dataObj['capacity'] = dataObj['capacity'].trim() === '-' ? null : dataObj['capacity']\r\n            break\r\n          case 5:\r\n            // 人工入库流量\r\n            dataObj['manual_inbound'] = td.querySelector('div>span').innerText\r\n            dataObj['manual_inbound'] = dataObj['manual_inbound'].trim() === '-' ? null : dataObj['manual_inbound']\r\n            break\r\n          case 6:\r\n            // 人工出库流量\r\n            dataObj['manual_outbound'] = td.querySelector('div>span').innerText\r\n            dataObj['manual_outbound'] = dataObj['manual_outbound'].trim() === '-' ? null : dataObj['manual_outbound']\r\n            break\r\n          default:\r\n            break\r\n        }\r\n      }\r\n      return dataObj\r\n    })\r\n  })\r\n\r\n  console.log(data.length)\r\n  console.log('爬取完成，包括冗余行数量')\r\n\r\n  // 合并数据\r\n  const half = data.length / 2\r\n  const firstHalf = data.slice(0, half)\r\n  const secondHalf = data.slice(half)\r\n\r\n  const filterEmptyKeys = (obj) => {\r\n    const filteredObj = {}\r\n    for (const key in obj) {\r\n      if (obj[key] !== null && obj[key] !== '') {\r\n        filteredObj[key] = obj[key]\r\n      }\r\n    }\r\n    return filteredObj\r\n  }\r\n\r\n  // 合并两个数组数据\r\n  const mergedData = firstHalf.map((item, index) => {\r\n    const filteredFirst = filterEmptyKeys(item)\r\n    const filteredSecond = filterEmptyKeys(secondHalf[index])\r\n    return { \r\n      ...filteredFirst,\r\n      ...filteredSecond,\r\n      // 固定数据\r\n      name: 水库名称,\r\n      code: 水库代码,\r\n      update_by: 'admin',\r\n      update_time: result,\r\n    }\r\n  })\r\n  // 过滤掉无效数据\r\n  .filter(item => item['水位'] !== null && item['库容'] !== null && item['雨量'] !== null)\r\n\r\n  await browser.close()\r\n\r\n  // 格式化数据的时间\r\n  mergedData.forEach((item) => {\r\n    item['record_time'] =\r\n      item['record_time'] &&\r\n      moment(item['record_time'], 'MM-DD HH:mm').format('DD/MM/YYYY HH:mm:ss')\r\n  })\r\n\r\n  // console.log(mergedData)\r\n  console.log('处理数据完成')\r\n\r\n  // 导出数据\r\n  const ws = XLSX.utils.json_to_sheet(mergedData)\r\n  const wb = XLSX.utils.book_new()\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n  // 保存桌面\r\n  const homedir = os.homedir();\r\n  const desktopPath = 'desktop'\r\n  const fileName = `${水库名称}-${水库代码}-${moment().format('YYYY-MM-DD-HHmmss')}.xlsx`\r\n  const filePath = path.join(homedir, desktopPath, fileName)\r\n  console.log(filePath)\r\n  XLSX.writeFile(wb, filePath)\r\n\r\n  // 通过对话框让用户选择导出目录和文件名\r\n  // const path = ipcRenderer.sendSync('showSaveJsonDialog')\r\n  // console.log('保存目录')\r\n  // console.log(path)\r\n  // dialog\r\n  //   .showSaveDialog({\r\n  //     defaultPath: `${水库名称}-${水库代码}-${result}.xlsx`,\r\n  //   })\r\n  //   .then((result) => {\r\n  //     if (!result.canceled && result.filePath) {\r\n  //       const filePath = result.filePath\r\n  //       // const ws = XLSX.utils.json_to_sheet(mergedData)\r\n  //       // const wb = XLSX.utils.book_new()\r\n  //       // XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n  //       // 将工作簿写入指定的文件路径\r\n  //       XLSX.writeFile(wb, filePath)\r\n  //     }\r\n  //   })\r\n  //   .catch((err) => {\r\n  //     console.error(err)\r\n  //   })\r\n}\r\n\r\nspider()\r\n\r\n// 路径测试\r\n// const { remote } = require('electron')\r\n// const desktopPath = remote.app.getPath('desktop')\r\n// console.log(desktopPath)\r\n// const fileName = `aaa.xlsx`\r\n// console.log(fileName)\r\n// const path = require('path')\r\n// const filePath = path.join('aaa', fileName)\r\n// console.log(filePath)\r\n// const os = require('os');\r\n// const homedir = os.homedir();\r\n// console.log(homedir)\r\n// const moment = require('moment')\r\n// const now = moment().format('YYYY-MM-DD HH-mm-ss')\r\n// console.log(now)\r\n// return","type":"code"}